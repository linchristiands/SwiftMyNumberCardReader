#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef LIBJEID_SWIFT_H
#define LIBJEID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="libjeid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSData;
@class NSDate;

/// CardFilesは、AP内の全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid9CardFiles")
@interface CardFiles : NSObject
/// コンストラクタ
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// パスに対応するデータを返します
/// remark:
/// パスが存在しない、またはパスに対応する値がnilのとき、nilが返ります
/// \param path パス
///
///
/// returns:
/// パスに対応するデータ
- (NSData * _Nullable)get:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// パスとパスに対応するデータを設定します
/// \param path パス
///
/// \param data パスに対応するデータ
///
- (void)put:(NSString * _Nonnull)path :(NSData * _Nullable)data;
@property (nonatomic, readonly, copy) NSDate * _Nonnull readDate;
@property (nonatomic, readonly, copy) NSData * _Nonnull sha256Digest;
@end

typedef SWIFT_ENUM(NSInteger, CardType, open) {
/// 不明
  CardTypeUNKNOWN = 0,
/// 個人番号カード
  CardTypeIN = 1,
/// 住基カード
  CardTypeJUKI = 2,
/// 運転免許証
  CardTypeDL = 3,
/// パスポート
  CardTypeEP = 4,
/// 在留カード
  CardTypeRC = 5,
};

@class NSNumber;

SWIFT_PROTOCOL("_TtP7libjeid9NFCDriver_")
@protocol NFCDriver
@optional
@property (nonatomic) BOOL _simulator;
@required
- (void)transmitWithCmd:(NSData * _Nonnull)cmd completion:(void (^ _Nonnull)(NSData * _Nullable, uint8_t, uint8_t, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC7libjeid13CoreNFCDriver") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface CoreNFCDriver : NSObject <NFCDriver>
- (void)transmitWithCmd:(NSData * _Nonnull)cmd completion:(void (^ _Nonnull)(NSData * _Nullable, uint8_t, uint8_t, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLDate;

/// DLCategoryは、運転免許証仕様の「免許の年月日」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid10DLCategory")
@interface DLCategory : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 免許の年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nonnull date;
/// タグを返します
@property (nonatomic, readonly) NSInteger tag;
/// 免許の種別名を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 保有している免許種別かどうかをチェックします
/// note:
/// 保有していればtrue、していなければfalseを返します
@property (nonatomic, readonly) BOOL isLicensed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLChangedEntry;

/// DLChangedEntriesは、運転免許証仕様の「記載事項変更等(本籍除く)」および「記載事項変更(本籍)」に対応するクラスです。
/// DriverLicenseAP#readChangedEntries() および DriverLicenseAP#readChangedRegisteredDomicile() を使用して取得します。
SWIFT_CLASS("_TtC7libjeid16DLChangedEntries")
@interface DLChangedEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 追記の有無を返します
/// note:
/// 追記がある場合はtrue、ない場合はfalseを返します
@property (nonatomic, readonly) BOOL isChanged;
/// 新公安委員会名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newPscNameList;
/// 新公安委員会名の配列を返します
/// important:
/// <code>newPscNameList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newPscNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newPscNameList");
/// 新氏名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newNameList;
/// 新氏名の配列を返します
/// important:
/// <code>newNameList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newNameList");
/// 新呼び名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newKanaList;
/// 新呼び名の配列を返します
/// important:
/// <code>newKanaList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newCallNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newKanaList");
/// 新住所の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newAddressList;
/// 新住所の配列を返します
/// important:
/// <code>newAddressList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newAddresses SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newAddressList");
/// 新条件の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newConditionList;
/// 新条件の配列を返します
/// important:
/// <code>newConditionList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newConditions SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newConditionList");
/// 条件解除の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull conditionCancellationList;
/// 条件解除の配列を返します
/// important:
/// <code>conditionCancellationList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable conditionCancellations SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use conditionCancellationList");
/// 備考の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull remarkList;
/// 備考の配列を返します
/// important:
/// <code>remarkList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable remarks SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use remarkList");
/// 予備の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull reserveList;
/// 予備の配列を返します
/// important:
/// <code>reserveList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable reserves SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use reserveList");
/// 新本籍の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newRegisteredDomicileList;
/// 新本籍の配列を返します
/// important:
/// <code>newRegisteredDomicileList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newRegisteredDomiciles SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newRegisteredDomicileList");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLString;

/// DLChangedEntryは、運転免許証仕様の「記載事項変更等(本籍除く)」および「記載事項変更(本籍)」に記載される1つの項目に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14DLChangedEntry")
@interface DLChangedEntry : NSObject
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 追記項目の日付を返します
@property (nonatomic, readonly, strong) DLDate * _Nonnull date;
/// 追記項目の値を返します
@property (nonatomic, readonly, strong) DLString * _Nonnull value;
/// 追記項目の公安委員会名を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull psc;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLCommonDataは、運転免許証仕様の「共通データ要素」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12DLCommonData")
@interface DLCommonData : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 仕様書バージョン番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// 交付年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable issueDate;
/// 有効期間の末日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable expireDate;
/// カード製造業者識別子を返します
@property (nonatomic, readonly) uint8_t manufacturerID;
/// 暗号関数識別子を返します
@property (nonatomic, readonly) uint8_t encryptionID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLDateは、元号+YYMMDD形式の日付クラスです。
SWIFT_CLASS("_TtC7libjeid6DLDate")
@interface DLDate : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// インスタンスに対応するDateオブジェクトを返します
@property (nonatomic, readonly, copy) NSDate * _Nonnull dateValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLExternalCharacters;

/// DLEntriesは、運転免許証仕様の「記載事項(本籍除く)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid9DLEntries")
@interface DLEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// JIS X 0208制定年番号を返します
@property (nonatomic, readonly) uint8_t jisx0208year;
/// 氏名を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull name;
/// 氏名をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>name.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 氏名のHTML表現
- (NSString * _Nullable)nameHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use name.toHTML()");
/// 氏名をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>name.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 氏名のJSON表現
- (NSString * _Nullable)nameJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'nameJson' has been renamed to 'name.toJSON()': please use name.toJSON()");
/// 呼び名(カナ)を返します
@property (nonatomic, readonly, copy) NSString * _Nullable kana;
/// 通称名を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull aliasName;
/// 通称名をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>aliasName.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 通称名のHTML表現
- (NSString * _Nullable)aliasNameHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use aliasName.toHTML()");
/// 通称名をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>aliasName.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 通称名のJSON表現
- (NSString * _Nullable)aliasNameJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'aliasNameJson' has been renamed to 'aliasName.toJSON()': please use aliasName.toJSON()");
/// 統一氏名(カナ)を返します
@property (nonatomic, readonly, copy) NSString * _Nullable callName;
/// 生年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable birthDate;
/// 住所を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull address;
/// 住所をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>address.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 住所のHTML表現
- (NSString * _Nullable)addressHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use address.toHTML()");
/// 住所をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>address.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 住所のJSON表現
- (NSString * _Nullable)addressJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'addressJson' has been renamed to 'address.toJSON()': please use address.toJSON()");
/// 交付年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable issueDate;
/// 照会番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable refNumber;
/// 免許証の色区分を返します
@property (nonatomic, readonly, copy) NSString * _Nullable colorClass;
/// 有効期間の末日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable expireDate;
/// 免許の条件の配列を返します
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable conditions;
/// 免許の条件のHTML表現の配列を返します
/// important:
/// <code>conditions</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許の条件のHTML表現の配列
- (NSArray<NSString *> * _Nullable)conditionsHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use conditions");
/// 免許の条件のJSON表現の配列を返します
/// important:
/// <code>conditions</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許の条件のJSON表現の配列
- (NSArray<NSString *> * _Nullable)conditionsJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="please use conditions");
/// 公安委員会名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable pscName;
/// 免許証の番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable licenseNumber;
/// 免許証の年月日の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLCategory *> * _Nullable categories;
/// タグを指定して免許の年月日を返します
/// \param tag タグ
///
///
/// returns:
/// 免許の年月日
- (DLCategory * _Nullable)category:(NSInteger)tag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLExternalCharactersは、運転免許証仕様の「外字」および「記載事項変更(外字)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid20DLExternalCharacters")
@interface DLExternalCharacters : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 追記の有無を返します
/// note:
/// 追記がある場合はtrue、ない場合はfalseを返します
@property (nonatomic, readonly) BOOL isChanged;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLPinSetting;
@class DLRegisteredDomicile;
@class DLSignature;
@class DLPhoto;
@class ValidationResult;
@class ValidationParameters;

/// DLFilesは、運転免許証APの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7DLFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DLFiles : CardFiles
/// 共通データ要素を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (DLCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 暗証番号(PIN)設定を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 暗証番号(PIN)設定
- (DLPinSetting * _Nullable)getPinSettingAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍除く)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍除く)
- (DLEntries * _Nullable)getEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍)
- (DLRegisteredDomicile * _Nullable)getRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 外字を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 外字
- (DLExternalCharacters * _Nullable)getExternalCharactersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更等(本籍除く)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更等(本籍除く)
- (DLChangedEntries * _Nullable)getChangedEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLChangedEntries * _Nullable)getChangedRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 電子署名を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 電子署名
- (DLSignature * _Nullable)getSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLPhoto * _Nullable)getPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// DLPhotoは、運転免許証仕様の「写真」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid7DLPhoto")
@interface DLPhoto : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 顔写真(JPEG2000)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLPinSettingは、運転免許証仕様の「暗証番号(PIN)設定」に対応するクラスです。
/// <br>
/// 極めて稀に、暗証番号が設定されていない免許証があります。<br>
/// 暗証番号が設定されていない免許証はデフォルトの暗証番号「****」を入力して読み出します。<br>
/// <code>isPinSet</code>プロパティで暗証番号が設定されているかどうかを確認できます。
SWIFT_CLASS("_TtC7libjeid12DLPinSetting")
@interface DLPinSetting : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 暗証番号(PIN)が設定されているかどうかを返します
/// note:
/// 暗証番号(PIN)が設定されている場合はtrue、そうでない場合はfalseを返します
@property (nonatomic, readonly) BOOL isPinSet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLRegisteredDomicileは、運転免許証仕様の「記載事項(本籍)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid20DLRegisteredDomicile")
@interface DLRegisteredDomicile : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 本籍を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull registeredDomicile;
/// 本籍をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>registeredDomicile.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 本籍のHTML表現
- (NSString * _Nullable)registeredDomicileHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use registeredDomicile.toHTML()");
/// 本籍をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>registeredDomicile.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 本籍のJSON表現
- (NSString * _Nullable)registeredDomicileJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'registeredDomicileJson' has been renamed to 'registeredDomicile.toJSON()': please use registeredDomicile.toJSON()");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLSignatureは、運転免許証仕様の「電子署名」に対応するクラスです。
/// remark:
/// このオブジェクトは署名を検証することができます。署名の検証に使用する場合、３つの段階があります。<ol>
/// <li>初期化
/// <p>このオブジェクトを初期化します。`initVerify`メソッドを参照してください。</p>
/// </li>
/// <li>更新
/// <p>検証の対象となるデータを更新します。`update`メソッドを参照してください。</p>
/// </li>
/// <li>署名の検証
/// <p>すべての更新済みデータに対して署名の検証を行います。`verify`メソッドを参照してください。</p>
/// </li></ol>
SWIFT_CLASS("_TtC7libjeid11DLSignature") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DLSignature : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 電子署名を返します
@property (nonatomic, readonly, copy) NSData * _Nullable signature;
/// シリアルを返します
@property (nonatomic, readonly, copy) NSData * _Nullable serial;
/// 発行者名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable issuer;
/// 主体者名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable subject;
/// 主体者鍵識別子を返します
@property (nonatomic, readonly, copy) NSData * _Nullable subjectKeyIdentifier;
/// 検証操作のための初期化を行います
/// <br>
/// このメソッドによる検証処理は非推奨となります。
/// important:
/// <code>DLFiles.validate()</code>をご使用ください
///
/// throws:
/// 初期化に失敗した場合、エラーがスローされます
- (BOOL)initVerifyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use DLFiles.validate()");
/// 指定されたbyteバッファを使用して、検証対象のデータを更新します
/// <br>
/// このメソッドによる検証処理は非推奨となります。
/// important:
/// <code>DLFiles.validate()</code>をご使用ください
/// \param data 更新に使用するbyteバッファ
///
///
/// throws:
/// 更新に失敗した場合、エラーがスローされます
- (BOOL)update:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use DLFiles.validate()");
/// 署名を検証します(Objective-C用)
///
/// throws:
/// 検証に失敗した場合、エラーがスローされます
///
/// returns:
/// 署名が検証された場合はtrue、そうでない場合はfalse
- (NSNumber * _Nullable)verifyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLStringは、運転免許証で利用される外字を含む文字列クラスです。
/// <br>
/// <code>toString()</code>を使用してこのオブジェクトを文字列として表現できます。
/// 1つめの外字は【※１】、7つめの外字は【※７】、欠字は【※欠】と表現されます。
/// <br>
/// <code>toJSON()</code>や<code>toHTML()</code>を使用して外字を含む文字列を様々なフォーマットで表現できます。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
SWIFT_CLASS("_TtC7libjeid8DLString")
@interface DLString : NSObject
/// インスタンスの説明を返します
/// <code>toString()</code>と同じ結果が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 文字列が空かどうかを返します
/// note:
/// 空の場合、<code>true</code>が返ります
@property (nonatomic, readonly) BOOL isEmpty;
/// 文字列が外字を含むかどうかを返します
/// note:
/// 外字を含む場合、<code>true</code>が返ります
@property (nonatomic, readonly) BOOL hasExtChars;
/// 運転免許証文字列をテキスト表現で返します
/// <br>
/// 1つめの外字は【※１】、7つめの外字は【※７】、欠字は【※欠】と表現されます。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// returns:
/// 運転免許証文字列のテキスト表現
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// 運転免許証文字列をHTML表現で返します
/// <br>
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// throws:
/// 外字データの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証文字列のHTML表現
- (NSString * _Nullable)toHTMLAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 運転免許証文字列をJSON表現で返します
/// <br>
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// throws:
/// 外字データの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証文字列のJSON表現
- (NSString * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JeidReader;

/// DriverLicenseAPは免許証APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid15DriverLicenseAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DriverLicenseAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 免許証APの暗証番号1のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPin1AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APの暗証番号2のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPin2AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APの暗証番号1を入力します
/// \param pin 暗証番号1(4桁)
///
///
/// throws:
/// 暗証番号の入力に失敗した場合、エラーがスローされます
- (BOOL)verifyPin1:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 免許証APの暗証番号2を入力します
/// \param pin 暗証番号2(4桁)
///
///
/// throws:
/// 暗証番号の入力に失敗した場合、エラーがスローされます
- (BOOL)verifyPin2:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 運転免許証内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証内のすべてのデータ
- (DLFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 共通データ要素を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (DLCommonData * _Nullable)readCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍除く)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍除く)
- (DLEntries * _Nullable)readEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍)
- (DLRegisteredDomicile * _Nullable)readRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 外字を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 外字
- (DLExternalCharacters * _Nullable)readExternalCharactersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更等(本籍除く)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更等(本籍除く)
- (DLChangedEntries * _Nullable)readChangedEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLChangedEntries * _Nullable)readChangedRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 電子署名を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 電子署名
- (DLSignature * _Nullable)readSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 写真を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 写真
- (DLPhoto * _Nullable)readPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPDataGroupは、パスポートのDataGroupに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid11EPDataGroup")
@interface EPDataGroup : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// FIDを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull fid;
/// short FIDを返します
@property (nonatomic, readonly) uint8_t shortFID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPCommonDataは、パスポートのCommonDataに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPCommonData")
@interface EPCommonData : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// LDSバージョンを返します
@property (nonatomic, readonly, copy) NSString * _Nullable ldsVersion;
/// Unicodeバージョンを返します
@property (nonatomic, readonly, copy) NSString * _Nullable unicodeVersion;
/// Tag Listを返します
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull tagList;
@end



/// EPDataGroup1は、パスポートのDG1に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup1")
@interface EPDataGroup1 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// MRZの文字列を返します
@property (nonatomic, readonly, copy) NSString * _Nullable mrz;
@end


/// EPDataGroup10は、パスポートのDG10に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup10")
@interface EPDataGroup10 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup11は、パスポートのDG11に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup11")
@interface EPDataGroup11 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup12は、パスポートのDG12に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup12")
@interface EPDataGroup12 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup13は、パスポートのDG13に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup13")
@interface EPDataGroup13 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup14は、パスポートのDG14に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup14")
@interface EPDataGroup14 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup15は、パスポートのDG15に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup15") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface EPDataGroup15 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup2は、パスポートのDG2に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup2")
@interface EPDataGroup2 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 顔写真(JPEG)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable faceJpeg;
@end


/// EPDataGroup3は、パスポートのDG3に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup3")
@interface EPDataGroup3 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup4は、パスポートのDG4に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup4")
@interface EPDataGroup4 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup5は、パスポートのDG5に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup5")
@interface EPDataGroup5 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup6は、パスポートのDG6に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup6")
@interface EPDataGroup6 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup7は、パスポートのDG7に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup7")
@interface EPDataGroup7 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup8は、パスポートのDG8に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup8")
@interface EPDataGroup8 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup9は、パスポートのDG9に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup9")
@interface EPDataGroup9 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class EPSecurityObject;

/// EPDocumentSecurityObjectは、パスポートのSODに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid24EPDocumentSecurityObject")
@interface EPDocumentSecurityObject : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, strong) EPSecurityObject * _Nullable securityObject;
@end


/// EPFilesは、パスポートAPの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7EPFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface EPFiles : CardFiles
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Common Dataを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Common Data
- (EPCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Document Security Objectを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Document Security Object
- (EPDocumentSecurityObject * _Nullable)getDocumentSecurityObjectAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 1を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 1
- (EPDataGroup1 * _Nullable)getDataGroup1AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 2を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 2
- (EPDataGroup2 * _Nullable)getDataGroup2AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 3を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 3
- (EPDataGroup3 * _Nullable)getDataGroup3AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 4を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 4
- (EPDataGroup4 * _Nullable)getDataGroup4AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 5を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 5
- (EPDataGroup5 * _Nullable)getDataGroup5AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 13を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 13
- (EPDataGroup13 * _Nullable)getDataGroup13AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 14を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 14
- (EPDataGroup14 * _Nullable)getDataGroup14AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 15を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 15
- (EPDataGroup15 * _Nullable)getDataGroup15AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7libjeid5EPKey")
@interface EPKey : NSObject
/// コンストラクタ
/// \param passportNumber パスポート番号
///
/// \param birthDate 生年月日(YYMMDDの6桁)
///
/// \param expirationDate 有効期限(YYMMDDの6桁)
///
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)passportNumber :(NSString * _Nonnull)birthDate :(NSString * _Nonnull)expirationDate error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPMRZは、パスポートのMachine Readable Zone (MRZ)に記載された情報に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid5EPMRZ")
@interface EPMRZ : NSObject
/// コンストラクタ
/// \param mrz MRZ文字列
///
///
/// throws:
/// デコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)mrz error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// ドキュメントコードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull documentCode;
/// 発行国または組織のコードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull issuingCountry;
/// 氏名を返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 姓を返します
/// remark:
/// 名前を姓と名の形にパースできなかった場合は空の文字列が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull surname;
/// 名を返します
/// remark:
/// 名前を姓と名の形にパースできなかった場合は空の文字列が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull givenName;
/// パスポート番号を返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull passportNumber;
/// パスポート番号のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull passportNumberCheckDigit;
/// 国籍コードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull nationality;
/// 生年月日(YYMMDD)を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull birthDate;
/// 生年月日のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull birthDateCheckDigit;
/// 性別を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull sex;
/// 有効期限(YYMMDD)を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// 有効期限のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDateCheckDigit;
/// オプションデータを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull optionalData;
/// オプションデータのチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull optionalDataCheckDigit;
/// パスポート番号、生年月日、有効期限、オプショナルデータおよびそれぞれのチェックディジットによる複合データのチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull compositeCheckDigit;
/// MRZの文字列すべてを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull mrz;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7libjeid16EPSecurityObject")
@interface EPSecurityObject : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// ハッシュアルゴリズムのOIDを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull hashAlgorithm;
/// ハッシュ値を返します
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSData *> * _Nonnull hashValues;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FlavorType, open) {
  FlavorTypeFREE = 0,
  FlavorTypeFULL = 1,
};

@class INTextFiles;
@class INTextMyNumber;
@class INTextAttributes;

/// INTextAPは券面入力補助APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid8INTextAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INTextAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 券面入力補助APの暗証番号のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの暗証番号を入力します
/// \param pin 暗証番号(4桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPin:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの照合番号Aのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの照合番号Aを入力します
/// \param pin 照合番号A(12桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinA:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの照合番号Bのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinBAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの照合番号Bを入力します
/// \param pin 照合番号B(14桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinB:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 個人番号カードの券面入力補助AP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面入力補助AP内のすべてのデータ
- (INTextFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を取得します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INTextMyNumber * _Nullable)readMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 4情報を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 4情報
- (INTextAttributes * _Nullable)readAttributesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INTextAttributesは、個人番号カードの券面入力補助APの4情報(氏名・住所・生年月日・性別)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid16INTextAttributes")
@interface INTextAttributes : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// ヘッダを返します
@property (nonatomic, readonly, copy) NSData * _Nullable header;
/// 氏名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// 住所を返します
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// 生年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
/// 性別を性別コードで返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// 性別を性別コードに対応する文字列で返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sexString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INTextFilesは、個人番号カードの券面入力補助AP内のデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid11INTextFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INTextFiles : CardFiles
/// <code>INTextFiles</code>オブジェクトをシリアライズします
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
///
/// returns:
/// シリアライズされたバイナリ
- (NSData * _Nullable)dumpAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を返します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INTextMyNumber * _Nullable)getMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 4情報(氏名、住所、生年月日、性別)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 4情報(氏名、住所、生年月日、性別)
- (INTextAttributes * _Nullable)getAttributesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// INTextMyNumberは、個人番号カードの券面入力補助APの個人番号(文字列)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14INTextMyNumber")
@interface INTextMyNumber : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 個人番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable myNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class INVisualFiles;
@class INVisualEntries;
@class INVisualMyNumber;

/// INVisualAPは券面APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid10INVisualAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 券面APの照合番号Aのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APの照合番号Aを入力します
/// \param pin 照合番号A(12桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinA:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面APの照合番号Bのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinBAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APの照合番号Bを入力します
/// \param pin 照合番号B(14桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinB:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの暗証番号を入力します
/// \param pin 暗証番号(4桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPin:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 個人番号カードの券面AP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面AP内のすべてのデータ
- (INVisualFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面の表面を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面の表面
- (INVisualEntries * _Nullable)readEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を取得します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INVisualMyNumber * _Nullable)readMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INVisualEntriesは、個人番号カードの券面APの表面に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid15INVisualEntries") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// ヘッダを返します
@property (nonatomic, readonly, copy) NSData * _Nullable header;
/// 生年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
/// 性別を性別コードで返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// 性別を性別コードに対応する文字列で返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sexString;
/// 氏名をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable name;
/// 住所をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable address;
/// 顔写真をJPEG2000形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
/// 電子署名を返します
@property (nonatomic, readonly, copy) NSData * _Nullable signature;
/// 有効期限を返します
@property (nonatomic, readonly, copy) NSString * _Nullable expireDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INVisualFilesは、個人番号カードの券面AP内のデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid13INVisualFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualFiles : CardFiles
/// 券面の表面を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面の表面
- (INVisualEntries * _Nullable)getEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を返します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INVisualMyNumber * _Nullable)getMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// INVisualMyNumberは、個人番号カードの券面APの個人番号(画像)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid16INVisualMyNumber") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualMyNumber : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 個人番号をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable myNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// JeidErrorの各caseのエラーコード(Objective-C用)
typedef SWIFT_ENUM_NAMED(NSInteger, JeidError, "JeidErrorCode", open) {
/// デコードに失敗しました
  JeidErrorDecodeFailed = 0,
/// エンコードに失敗しました
  JeidErrorEncodeFailed = 1,
/// ファイルがありません
  JeidErrorFileNotFound = 2,
/// 鍵が無効です
  JeidErrorInvalidKey = 3,
/// 暗証番号が無効です
  JeidErrorInvalidPin = 4,
/// セキュリティステータスが満たされていません
  JeidErrorSecurityStatusNotSatisfied = 5,
/// 署名検証に失敗しました
  JeidErrorSignatureVerificationFailed = 6,
/// 送受信に失敗しました
  JeidErrorTransceiveFailed = 7,
/// 予期しない応答がありました
  JeidErrorUnexpectedResponse = 8,
/// サポートされていない操作です
  JeidErrorUnsupportedOperation = 9,
};

@protocol NFCISO7816Tag;
@class PassportAP;
@class ResidenceCardAP;

/// JeidReaderは、各種APのインスタンスを取得するために使用するクラスです。
SWIFT_CLASS("_TtC7libjeid10JeidReader") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface JeidReader : NSObject
/// コンストラクタ
/// \param tag ISO7816タグ
///
- (nullable instancetype)init:(id <NFCISO7816Tag> _Nonnull)tag error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// コンストラクタ
/// \param driver NFC Driver
///
- (nullable instancetype)initWithDriver:(id <NFCDriver> _Nonnull)driver error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL debug;
/// カード種別を判別します(Objective-C用)
///
/// throws:
/// カード種別の判別に失敗した場合、エラーがスローされます
///
/// returns:
/// カード種別を表す数値
- (NSNumber * _Nullable)detectCardTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許証AP
- (DriverLicenseAP * _Nullable)selectDLAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面入力補助AP
- (INTextAP * _Nullable)selectINTextAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面AP
- (INVisualAP * _Nullable)selectINVisualAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// パスポートAPのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// パスポートAP
- (PassportAP * _Nullable)selectEPAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 在留カードAPのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP
- (ResidenceCardAP * _Nullable)selectRCAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// PassportAPはパスポートAPを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid10PassportAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface PassportAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// Basic Access Control (BAC)用の鍵交換を行います
/// \param epKey パスポート番号、生年月日、有効期限から作成した<code>EPKey</code>オブジェクト
///
///
/// throws:
/// 鍵交換に失敗した場合、エラーがスローされます
- (BOOL)startBAC:(EPKey * _Nonnull)epKey error:(NSError * _Nullable * _Nullable)error;
/// パスポートAP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP内のすべてのデータ
- (EPFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Active Authenticationを行います(Objective-C用)。
/// note:
/// Active Authenticationをサポートしないパスポートの場合は<code>JeidError.fileNotFound(message:)</code>がスローされます
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param files <code>EPFiles</code>オブジェクト
///
///
/// throws:
/// 認証中に発生したエラーがスローされます
///
/// returns:
/// 認証に成功した場合は<code>true</code>、そうでない場合は<code>false</code>
- (NSNumber * _Nullable)activeAuthentication:(EPFiles * _Nonnull)files error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCAddressは、在留カードおよび特別永住者証明書の住居地（裏面追記）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid9RCAddress")
@interface RCAddress : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 追記書き込み年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable date;
/// 市区町村コードを返します
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// 住居地を返します
@property (nonatomic, readonly, copy) NSString * _Nullable address;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCardEntriesは、在留カードおよび特別永住者証明書の券面（表）イメージ(DF1/EF01)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13RCCardEntries")
@interface RCCardEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 券面（表）イメージをTIFF形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable tiffData;
/// 券面（表）イメージをPNG形式で返します
///
/// throws:
/// TIFFからPNGへの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面（表）イメージ(PNG)
- (NSData * _Nullable)pngDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCardTypeは、在留カードおよび特別永住者証明書のカード種別に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid10RCCardType")
@interface RCCardType : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// カード種別を返します
@property (nonatomic, readonly, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCommonDataは、在留カードおよび特別永住者証明書の共通データ要素に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12RCCommonData")
@interface RCCommonData : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 仕様バージョン番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCComprehensivePermissionは、在留カードの裏面資格外活動包括許可欄（DF2/EF02）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid25RCComprehensivePermission")
@interface RCComprehensivePermission : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 資格外活動包括許可を返します
@property (nonatomic, readonly, copy) NSString * _Nullable permission;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RCPhoto;
@class RCIndividualPermission;
@class RCUpdateStatus;
@class RCSignature;

/// RCFilesは、在留カードAPの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7RCFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface RCFiles : CardFiles
/// 共通データ要素を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (RCCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// カード種別を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// カード種別
- (RCCardType * _Nullable)getCardTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面（表）イメージを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面（表）イメージ
- (RCCardEntries * _Nullable)getCardEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 顔画像を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 顔画像
- (RCPhoto * _Nullable)getPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 住居地（裏面追記）を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 住居地（裏面追記）
- (RCAddress * _Nullable)getAddressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面資格外活動包括許可欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面資格外活動包括許可欄
- (RCComprehensivePermission * _Nullable)getComprehensivePermissionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面資格外活動個別許可欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面資格外活動個別許可欄
- (RCIndividualPermission * _Nullable)getIndividualPermissionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面在留期間等更新申請欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面在留期間等更新申請欄
- (RCUpdateStatus * _Nullable)getUpdateStatusAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// チェックコード・公開鍵証明書を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// チェックコード・公開鍵証明書
- (RCSignature * _Nullable)getSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// RCIndividualPermissionは、在留カードの裏面資格外活動個別許可欄（DF2/EF03）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid22RCIndividualPermission")
@interface RCIndividualPermission : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 資格外活動個別許可を返します
@property (nonatomic, readonly, copy) NSString * _Nullable permission;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCKeyは在留カード等番号に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid5RCKey")
@interface RCKey : NSObject
/// コンストラクタ
/// \param number 在留カード等番号
///
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)number error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCPhotoは、在留カードおよび特別永住者証明書の顔画像(DF1/EF02)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid7RCPhoto")
@interface RCPhoto : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 顔写真(JPEG2000)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCSignatureは、在留カードおよび特別永住者証明書のチェックコード・公開鍵証明書(DF3/EF01)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid11RCSignature") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface RCSignature : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// チェックコードを返します
@property (nonatomic, readonly, copy) NSData * _Nullable checkcode;
/// 公開鍵証明書を返します
@property (nonatomic, readonly) SecCertificateRef _Nullable certificate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCUpdateStatusは、在留カードの裏面在留期間等更新申請欄（DF2/EF04）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14RCUpdateStatus") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface RCUpdateStatus : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 在留期間更新等許可申請ステータスコードを返します
@property (nonatomic, readonly, copy) NSString * _Nullable status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ResidenceCardAPは在留カードAPを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid15ResidenceCardAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface ResidenceCardAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// アクセスコントロール(AC)を開始します
/// <br>
/// 以降の端末とカード間の通信はセキュアメッセージング(SM)により適宜暗号化されます。
/// 在留カード等番号による認証も行われます。
/// note:
/// 在留カードAPのSMはパスポートのBACに相当します
/// \param rcKey 在留カード等番号から作成した<code>RCKey</code>オブジェクト
///
///
/// throws:
/// SMの鍵交換に失敗した場合、エラーがスローされます
- (BOOL)startAC:(RCKey * _Nonnull)rcKey error:(NSError * _Nullable * _Nullable)error;
/// 在留カードAP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP内のすべてのデータ
- (RCFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ValidationParametersは、署名検証の動作を調整するパラメータを表すクラスです。
SWIFT_CLASS("_TtC7libjeid20ValidationParameters")
@interface ValidationParameters : NSObject
/// コンストラクタ
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, copy) NSString * _Nonnull country;
/// 検証標準時刻
@property (nonatomic, copy) NSDate * _Nullable date;
/// 個人番号カードにおいて個人番号を検証するかどうか
/// remark:
/// true(デフォルト値)の場合、個人番号の署名検証を行います
@property (nonatomic) BOOL validateMyNumber;
/// 個人番号カードにおいて属性情報を検証するかどうか
/// remark:
/// true(デフォルト値)の場合、署名検証を行います
@property (nonatomic) BOOL validateAttributes;
@end

enum ValidationResultStatus : NSInteger;

/// ValidationResultは、署名検証結果を表すクラスです。
SWIFT_CLASS("_TtC7libjeid16ValidationResult")
@interface ValidationResult : NSObject
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) enum ValidationResultStatus status;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// ValidationResultStatusは、署名検証結果の状態を表すクラスです。
typedef SWIFT_ENUM(NSInteger, ValidationResultStatus, open) {
/// 有効
  ValidationResultStatusVALID = 0,
/// 署名値の検証に失敗
  ValidationResultStatusINVALID_SIGNATURE = 1,
/// 証明書の検証に失敗
  ValidationResultStatusINVALID_CERTIFICATE = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef LIBJEID_SWIFT_H
#define LIBJEID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="libjeid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSData;
@class NSDate;

/// CardFilesは、AP内の全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid9CardFiles")
@interface CardFiles : NSObject
/// コンストラクタ
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// パスに対応するデータを返します
/// remark:
/// パスが存在しない、またはパスに対応する値がnilのとき、nilが返ります
/// \param path パス
///
///
/// returns:
/// パスに対応するデータ
- (NSData * _Nullable)get:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// パスとパスに対応するデータを設定します
/// \param path パス
///
/// \param data パスに対応するデータ
///
- (void)put:(NSString * _Nonnull)path :(NSData * _Nullable)data;
@property (nonatomic, readonly, copy) NSDate * _Nonnull readDate;
@property (nonatomic, readonly, copy) NSData * _Nonnull sha256Digest;
@end

typedef SWIFT_ENUM(NSInteger, CardType, open) {
/// 不明
  CardTypeUNKNOWN = 0,
/// 個人番号カード
  CardTypeIN = 1,
/// 住基カード
  CardTypeJUKI = 2,
/// 運転免許証
  CardTypeDL = 3,
/// パスポート
  CardTypeEP = 4,
/// 在留カード
  CardTypeRC = 5,
};

@class NSNumber;

SWIFT_PROTOCOL("_TtP7libjeid9NFCDriver_")
@protocol NFCDriver
@optional
@property (nonatomic) BOOL _simulator;
@required
- (void)transmitWithCmd:(NSData * _Nonnull)cmd completion:(void (^ _Nonnull)(NSData * _Nullable, uint8_t, uint8_t, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC7libjeid13CoreNFCDriver") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface CoreNFCDriver : NSObject <NFCDriver>
- (void)transmitWithCmd:(NSData * _Nonnull)cmd completion:(void (^ _Nonnull)(NSData * _Nullable, uint8_t, uint8_t, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLDate;

/// DLCategoryは、運転免許証仕様の「免許の年月日」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid10DLCategory")
@interface DLCategory : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 免許の年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nonnull date;
/// タグを返します
@property (nonatomic, readonly) NSInteger tag;
/// 免許の種別名を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 保有している免許種別かどうかをチェックします
/// note:
/// 保有していればtrue、していなければfalseを返します
@property (nonatomic, readonly) BOOL isLicensed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLChangedEntry;

/// DLChangedEntriesは、運転免許証仕様の「記載事項変更等(本籍除く)」および「記載事項変更(本籍)」に対応するクラスです。
/// DriverLicenseAP#readChangedEntries() および DriverLicenseAP#readChangedRegisteredDomicile() を使用して取得します。
SWIFT_CLASS("_TtC7libjeid16DLChangedEntries")
@interface DLChangedEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 追記の有無を返します
/// note:
/// 追記がある場合はtrue、ない場合はfalseを返します
@property (nonatomic, readonly) BOOL isChanged;
/// 新公安委員会名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newPscNameList;
/// 新公安委員会名の配列を返します
/// important:
/// <code>newPscNameList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newPscNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newPscNameList");
/// 新氏名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newNameList;
/// 新氏名の配列を返します
/// important:
/// <code>newNameList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newNameList");
/// 新呼び名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newKanaList;
/// 新呼び名の配列を返します
/// important:
/// <code>newKanaList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newCallNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newKanaList");
/// 新住所の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newAddressList;
/// 新住所の配列を返します
/// important:
/// <code>newAddressList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newAddresses SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newAddressList");
/// 新条件の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newConditionList;
/// 新条件の配列を返します
/// important:
/// <code>newConditionList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newConditions SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newConditionList");
/// 条件解除の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull conditionCancellationList;
/// 条件解除の配列を返します
/// important:
/// <code>conditionCancellationList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable conditionCancellations SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use conditionCancellationList");
/// 備考の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull remarkList;
/// 備考の配列を返します
/// important:
/// <code>remarkList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable remarks SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use remarkList");
/// 予備の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull reserveList;
/// 予備の配列を返します
/// important:
/// <code>reserveList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable reserves SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use reserveList");
/// 新本籍の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newRegisteredDomicileList;
/// 新本籍の配列を返します
/// important:
/// <code>newRegisteredDomicileList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newRegisteredDomiciles SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newRegisteredDomicileList");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLString;

/// DLChangedEntryは、運転免許証仕様の「記載事項変更等(本籍除く)」および「記載事項変更(本籍)」に記載される1つの項目に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14DLChangedEntry")
@interface DLChangedEntry : NSObject
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 追記項目の日付を返します
@property (nonatomic, readonly, strong) DLDate * _Nonnull date;
/// 追記項目の値を返します
@property (nonatomic, readonly, strong) DLString * _Nonnull value;
/// 追記項目の公安委員会名を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull psc;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLCommonDataは、運転免許証仕様の「共通データ要素」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12DLCommonData")
@interface DLCommonData : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 仕様書バージョン番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// 交付年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable issueDate;
/// 有効期間の末日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable expireDate;
/// カード製造業者識別子を返します
@property (nonatomic, readonly) uint8_t manufacturerID;
/// 暗号関数識別子を返します
@property (nonatomic, readonly) uint8_t encryptionID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLDateは、元号+YYMMDD形式の日付クラスです。
SWIFT_CLASS("_TtC7libjeid6DLDate")
@interface DLDate : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// インスタンスに対応するDateオブジェクトを返します
@property (nonatomic, readonly, copy) NSDate * _Nonnull dateValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLExternalCharacters;

/// DLEntriesは、運転免許証仕様の「記載事項(本籍除く)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid9DLEntries")
@interface DLEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// JIS X 0208制定年番号を返します
@property (nonatomic, readonly) uint8_t jisx0208year;
/// 氏名を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull name;
/// 氏名をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>name.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 氏名のHTML表現
- (NSString * _Nullable)nameHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use name.toHTML()");
/// 氏名をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>name.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 氏名のJSON表現
- (NSString * _Nullable)nameJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'nameJson' has been renamed to 'name.toJSON()': please use name.toJSON()");
/// 呼び名(カナ)を返します
@property (nonatomic, readonly, copy) NSString * _Nullable kana;
/// 通称名を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull aliasName;
/// 通称名をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>aliasName.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 通称名のHTML表現
- (NSString * _Nullable)aliasNameHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use aliasName.toHTML()");
/// 通称名をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>aliasName.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 通称名のJSON表現
- (NSString * _Nullable)aliasNameJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'aliasNameJson' has been renamed to 'aliasName.toJSON()': please use aliasName.toJSON()");
/// 統一氏名(カナ)を返します
@property (nonatomic, readonly, copy) NSString * _Nullable callName;
/// 生年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable birthDate;
/// 住所を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull address;
/// 住所をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>address.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 住所のHTML表現
- (NSString * _Nullable)addressHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use address.toHTML()");
/// 住所をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>address.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 住所のJSON表現
- (NSString * _Nullable)addressJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'addressJson' has been renamed to 'address.toJSON()': please use address.toJSON()");
/// 交付年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable issueDate;
/// 照会番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable refNumber;
/// 免許証の色区分を返します
@property (nonatomic, readonly, copy) NSString * _Nullable colorClass;
/// 有効期間の末日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable expireDate;
/// 免許の条件の配列を返します
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable conditions;
/// 免許の条件のHTML表現の配列を返します
/// important:
/// <code>conditions</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許の条件のHTML表現の配列
- (NSArray<NSString *> * _Nullable)conditionsHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use conditions");
/// 免許の条件のJSON表現の配列を返します
/// important:
/// <code>conditions</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許の条件のJSON表現の配列
- (NSArray<NSString *> * _Nullable)conditionsJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="please use conditions");
/// 公安委員会名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable pscName;
/// 免許証の番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable licenseNumber;
/// 免許証の年月日の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLCategory *> * _Nullable categories;
/// タグを指定して免許の年月日を返します
/// \param tag タグ
///
///
/// returns:
/// 免許の年月日
- (DLCategory * _Nullable)category:(NSInteger)tag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLExternalCharactersは、運転免許証仕様の「外字」および「記載事項変更(外字)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid20DLExternalCharacters")
@interface DLExternalCharacters : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 追記の有無を返します
/// note:
/// 追記がある場合はtrue、ない場合はfalseを返します
@property (nonatomic, readonly) BOOL isChanged;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLPinSetting;
@class DLRegisteredDomicile;
@class DLSignature;
@class DLPhoto;
@class ValidationResult;
@class ValidationParameters;

/// DLFilesは、運転免許証APの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7DLFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DLFiles : CardFiles
/// 共通データ要素を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (DLCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 暗証番号(PIN)設定を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 暗証番号(PIN)設定
- (DLPinSetting * _Nullable)getPinSettingAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍除く)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍除く)
- (DLEntries * _Nullable)getEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍)
- (DLRegisteredDomicile * _Nullable)getRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 外字を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 外字
- (DLExternalCharacters * _Nullable)getExternalCharactersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更等(本籍除く)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更等(本籍除く)
- (DLChangedEntries * _Nullable)getChangedEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLChangedEntries * _Nullable)getChangedRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 電子署名を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 電子署名
- (DLSignature * _Nullable)getSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLPhoto * _Nullable)getPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// DLPhotoは、運転免許証仕様の「写真」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid7DLPhoto")
@interface DLPhoto : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 顔写真(JPEG2000)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLPinSettingは、運転免許証仕様の「暗証番号(PIN)設定」に対応するクラスです。
/// <br>
/// 極めて稀に、暗証番号が設定されていない免許証があります。<br>
/// 暗証番号が設定されていない免許証はデフォルトの暗証番号「****」を入力して読み出します。<br>
/// <code>isPinSet</code>プロパティで暗証番号が設定されているかどうかを確認できます。
SWIFT_CLASS("_TtC7libjeid12DLPinSetting")
@interface DLPinSetting : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 暗証番号(PIN)が設定されているかどうかを返します
/// note:
/// 暗証番号(PIN)が設定されている場合はtrue、そうでない場合はfalseを返します
@property (nonatomic, readonly) BOOL isPinSet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLRegisteredDomicileは、運転免許証仕様の「記載事項(本籍)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid20DLRegisteredDomicile")
@interface DLRegisteredDomicile : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 本籍を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull registeredDomicile;
/// 本籍をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>registeredDomicile.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 本籍のHTML表現
- (NSString * _Nullable)registeredDomicileHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use registeredDomicile.toHTML()");
/// 本籍をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>registeredDomicile.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 本籍のJSON表現
- (NSString * _Nullable)registeredDomicileJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'registeredDomicileJson' has been renamed to 'registeredDomicile.toJSON()': please use registeredDomicile.toJSON()");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLSignatureは、運転免許証仕様の「電子署名」に対応するクラスです。
/// remark:
/// このオブジェクトは署名を検証することができます。署名の検証に使用する場合、３つの段階があります。<ol>
/// <li>初期化
/// <p>このオブジェクトを初期化します。`initVerify`メソッドを参照してください。</p>
/// </li>
/// <li>更新
/// <p>検証の対象となるデータを更新します。`update`メソッドを参照してください。</p>
/// </li>
/// <li>署名の検証
/// <p>すべての更新済みデータに対して署名の検証を行います。`verify`メソッドを参照してください。</p>
/// </li></ol>
SWIFT_CLASS("_TtC7libjeid11DLSignature") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DLSignature : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 電子署名を返します
@property (nonatomic, readonly, copy) NSData * _Nullable signature;
/// シリアルを返します
@property (nonatomic, readonly, copy) NSData * _Nullable serial;
/// 発行者名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable issuer;
/// 主体者名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable subject;
/// 主体者鍵識別子を返します
@property (nonatomic, readonly, copy) NSData * _Nullable subjectKeyIdentifier;
/// 検証操作のための初期化を行います
/// <br>
/// このメソッドによる検証処理は非推奨となります。
/// important:
/// <code>DLFiles.validate()</code>をご使用ください
///
/// throws:
/// 初期化に失敗した場合、エラーがスローされます
- (BOOL)initVerifyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use DLFiles.validate()");
/// 指定されたbyteバッファを使用して、検証対象のデータを更新します
/// <br>
/// このメソッドによる検証処理は非推奨となります。
/// important:
/// <code>DLFiles.validate()</code>をご使用ください
/// \param data 更新に使用するbyteバッファ
///
///
/// throws:
/// 更新に失敗した場合、エラーがスローされます
- (BOOL)update:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use DLFiles.validate()");
/// 署名を検証します(Objective-C用)
///
/// throws:
/// 検証に失敗した場合、エラーがスローされます
///
/// returns:
/// 署名が検証された場合はtrue、そうでない場合はfalse
- (NSNumber * _Nullable)verifyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLStringは、運転免許証で利用される外字を含む文字列クラスです。
/// <br>
/// <code>toString()</code>を使用してこのオブジェクトを文字列として表現できます。
/// 1つめの外字は【※１】、7つめの外字は【※７】、欠字は【※欠】と表現されます。
/// <br>
/// <code>toJSON()</code>や<code>toHTML()</code>を使用して外字を含む文字列を様々なフォーマットで表現できます。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
SWIFT_CLASS("_TtC7libjeid8DLString")
@interface DLString : NSObject
/// インスタンスの説明を返します
/// <code>toString()</code>と同じ結果が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 文字列が空かどうかを返します
/// note:
/// 空の場合、<code>true</code>が返ります
@property (nonatomic, readonly) BOOL isEmpty;
/// 文字列が外字を含むかどうかを返します
/// note:
/// 外字を含む場合、<code>true</code>が返ります
@property (nonatomic, readonly) BOOL hasExtChars;
/// 運転免許証文字列をテキスト表現で返します
/// <br>
/// 1つめの外字は【※１】、7つめの外字は【※７】、欠字は【※欠】と表現されます。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// returns:
/// 運転免許証文字列のテキスト表現
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// 運転免許証文字列をHTML表現で返します
/// <br>
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// throws:
/// 外字データの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証文字列のHTML表現
- (NSString * _Nullable)toHTMLAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 運転免許証文字列をJSON表現で返します
/// <br>
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// throws:
/// 外字データの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証文字列のJSON表現
- (NSString * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JeidReader;

/// DriverLicenseAPは免許証APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid15DriverLicenseAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DriverLicenseAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 免許証APの暗証番号1のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPin1AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APの暗証番号2のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPin2AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APの暗証番号1を入力します
/// \param pin 暗証番号1(4桁)
///
///
/// throws:
/// 暗証番号の入力に失敗した場合、エラーがスローされます
- (BOOL)verifyPin1:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 免許証APの暗証番号2を入力します
/// \param pin 暗証番号2(4桁)
///
///
/// throws:
/// 暗証番号の入力に失敗した場合、エラーがスローされます
- (BOOL)verifyPin2:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 運転免許証内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証内のすべてのデータ
- (DLFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 共通データ要素を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (DLCommonData * _Nullable)readCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍除く)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍除く)
- (DLEntries * _Nullable)readEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍)
- (DLRegisteredDomicile * _Nullable)readRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 外字を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 外字
- (DLExternalCharacters * _Nullable)readExternalCharactersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更等(本籍除く)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更等(本籍除く)
- (DLChangedEntries * _Nullable)readChangedEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLChangedEntries * _Nullable)readChangedRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 電子署名を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 電子署名
- (DLSignature * _Nullable)readSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 写真を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 写真
- (DLPhoto * _Nullable)readPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPDataGroupは、パスポートのDataGroupに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid11EPDataGroup")
@interface EPDataGroup : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// FIDを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull fid;
/// short FIDを返します
@property (nonatomic, readonly) uint8_t shortFID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPCommonDataは、パスポートのCommonDataに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPCommonData")
@interface EPCommonData : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// LDSバージョンを返します
@property (nonatomic, readonly, copy) NSString * _Nullable ldsVersion;
/// Unicodeバージョンを返します
@property (nonatomic, readonly, copy) NSString * _Nullable unicodeVersion;
/// Tag Listを返します
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull tagList;
@end



/// EPDataGroup1は、パスポートのDG1に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup1")
@interface EPDataGroup1 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// MRZの文字列を返します
@property (nonatomic, readonly, copy) NSString * _Nullable mrz;
@end


/// EPDataGroup10は、パスポートのDG10に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup10")
@interface EPDataGroup10 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup11は、パスポートのDG11に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup11")
@interface EPDataGroup11 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup12は、パスポートのDG12に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup12")
@interface EPDataGroup12 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup13は、パスポートのDG13に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup13")
@interface EPDataGroup13 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup14は、パスポートのDG14に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup14")
@interface EPDataGroup14 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup15は、パスポートのDG15に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup15") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface EPDataGroup15 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup2は、パスポートのDG2に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup2")
@interface EPDataGroup2 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 顔写真(JPEG)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable faceJpeg;
@end


/// EPDataGroup3は、パスポートのDG3に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup3")
@interface EPDataGroup3 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup4は、パスポートのDG4に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup4")
@interface EPDataGroup4 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup5は、パスポートのDG5に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup5")
@interface EPDataGroup5 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup6は、パスポートのDG6に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup6")
@interface EPDataGroup6 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup7は、パスポートのDG7に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup7")
@interface EPDataGroup7 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup8は、パスポートのDG8に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup8")
@interface EPDataGroup8 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup9は、パスポートのDG9に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup9")
@interface EPDataGroup9 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class EPSecurityObject;

/// EPDocumentSecurityObjectは、パスポートのSODに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid24EPDocumentSecurityObject")
@interface EPDocumentSecurityObject : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, strong) EPSecurityObject * _Nullable securityObject;
@end


/// EPFilesは、パスポートAPの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7EPFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface EPFiles : CardFiles
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Common Dataを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Common Data
- (EPCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Document Security Objectを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Document Security Object
- (EPDocumentSecurityObject * _Nullable)getDocumentSecurityObjectAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 1を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 1
- (EPDataGroup1 * _Nullable)getDataGroup1AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 2を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 2
- (EPDataGroup2 * _Nullable)getDataGroup2AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 3を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 3
- (EPDataGroup3 * _Nullable)getDataGroup3AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 4を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 4
- (EPDataGroup4 * _Nullable)getDataGroup4AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 5を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 5
- (EPDataGroup5 * _Nullable)getDataGroup5AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 13を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 13
- (EPDataGroup13 * _Nullable)getDataGroup13AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 14を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 14
- (EPDataGroup14 * _Nullable)getDataGroup14AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 15を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 15
- (EPDataGroup15 * _Nullable)getDataGroup15AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7libjeid5EPKey")
@interface EPKey : NSObject
/// コンストラクタ
/// \param passportNumber パスポート番号
///
/// \param birthDate 生年月日(YYMMDDの6桁)
///
/// \param expirationDate 有効期限(YYMMDDの6桁)
///
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)passportNumber :(NSString * _Nonnull)birthDate :(NSString * _Nonnull)expirationDate error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPMRZは、パスポートのMachine Readable Zone (MRZ)に記載された情報に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid5EPMRZ")
@interface EPMRZ : NSObject
/// コンストラクタ
/// \param mrz MRZ文字列
///
///
/// throws:
/// デコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)mrz error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// ドキュメントコードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull documentCode;
/// 発行国または組織のコードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull issuingCountry;
/// 氏名を返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 姓を返します
/// remark:
/// 名前を姓と名の形にパースできなかった場合は空の文字列が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull surname;
/// 名を返します
/// remark:
/// 名前を姓と名の形にパースできなかった場合は空の文字列が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull givenName;
/// パスポート番号を返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull passportNumber;
/// パスポート番号のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull passportNumberCheckDigit;
/// 国籍コードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull nationality;
/// 生年月日(YYMMDD)を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull birthDate;
/// 生年月日のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull birthDateCheckDigit;
/// 性別を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull sex;
/// 有効期限(YYMMDD)を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// 有効期限のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDateCheckDigit;
/// オプションデータを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull optionalData;
/// オプションデータのチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull optionalDataCheckDigit;
/// パスポート番号、生年月日、有効期限、オプショナルデータおよびそれぞれのチェックディジットによる複合データのチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull compositeCheckDigit;
/// MRZの文字列すべてを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull mrz;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7libjeid16EPSecurityObject")
@interface EPSecurityObject : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// ハッシュアルゴリズムのOIDを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull hashAlgorithm;
/// ハッシュ値を返します
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSData *> * _Nonnull hashValues;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FlavorType, open) {
  FlavorTypeFREE = 0,
  FlavorTypeFULL = 1,
};

@class INTextFiles;
@class INTextMyNumber;
@class INTextAttributes;

/// INTextAPは券面入力補助APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid8INTextAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INTextAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 券面入力補助APの暗証番号のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの暗証番号を入力します
/// \param pin 暗証番号(4桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPin:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの照合番号Aのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの照合番号Aを入力します
/// \param pin 照合番号A(12桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinA:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの照合番号Bのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinBAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの照合番号Bを入力します
/// \param pin 照合番号B(14桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinB:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 個人番号カードの券面入力補助AP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面入力補助AP内のすべてのデータ
- (INTextFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を取得します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INTextMyNumber * _Nullable)readMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 4情報を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 4情報
- (INTextAttributes * _Nullable)readAttributesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INTextAttributesは、個人番号カードの券面入力補助APの4情報(氏名・住所・生年月日・性別)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid16INTextAttributes")
@interface INTextAttributes : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// ヘッダを返します
@property (nonatomic, readonly, copy) NSData * _Nullable header;
/// 氏名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// 住所を返します
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// 生年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
/// 性別を性別コードで返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// 性別を性別コードに対応する文字列で返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sexString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INTextFilesは、個人番号カードの券面入力補助AP内のデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid11INTextFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INTextFiles : CardFiles
/// <code>INTextFiles</code>オブジェクトをシリアライズします
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
///
/// returns:
/// シリアライズされたバイナリ
- (NSData * _Nullable)dumpAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を返します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INTextMyNumber * _Nullable)getMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 4情報(氏名、住所、生年月日、性別)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 4情報(氏名、住所、生年月日、性別)
- (INTextAttributes * _Nullable)getAttributesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// INTextMyNumberは、個人番号カードの券面入力補助APの個人番号(文字列)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14INTextMyNumber")
@interface INTextMyNumber : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 個人番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable myNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class INVisualFiles;
@class INVisualEntries;
@class INVisualMyNumber;

/// INVisualAPは券面APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid10INVisualAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 券面APの照合番号Aのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APの照合番号Aを入力します
/// \param pin 照合番号A(12桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinA:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面APの照合番号Bのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinBAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APの照合番号Bを入力します
/// \param pin 照合番号B(14桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinB:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの暗証番号を入力します
/// \param pin 暗証番号(4桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPin:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 個人番号カードの券面AP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面AP内のすべてのデータ
- (INVisualFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面の表面を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面の表面
- (INVisualEntries * _Nullable)readEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を取得します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INVisualMyNumber * _Nullable)readMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INVisualEntriesは、個人番号カードの券面APの表面に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid15INVisualEntries") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// ヘッダを返します
@property (nonatomic, readonly, copy) NSData * _Nullable header;
/// 生年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
/// 性別を性別コードで返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// 性別を性別コードに対応する文字列で返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sexString;
/// 氏名をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable name;
/// 住所をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable address;
/// 顔写真をJPEG2000形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
/// 電子署名を返します
@property (nonatomic, readonly, copy) NSData * _Nullable signature;
/// 有効期限を返します
@property (nonatomic, readonly, copy) NSString * _Nullable expireDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INVisualFilesは、個人番号カードの券面AP内のデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid13INVisualFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualFiles : CardFiles
/// 券面の表面を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面の表面
- (INVisualEntries * _Nullable)getEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を返します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INVisualMyNumber * _Nullable)getMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// INVisualMyNumberは、個人番号カードの券面APの個人番号(画像)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid16INVisualMyNumber") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualMyNumber : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 個人番号をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable myNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// JeidErrorの各caseのエラーコード(Objective-C用)
typedef SWIFT_ENUM_NAMED(NSInteger, JeidError, "JeidErrorCode", open) {
/// デコードに失敗しました
  JeidErrorDecodeFailed = 0,
/// エンコードに失敗しました
  JeidErrorEncodeFailed = 1,
/// ファイルがありません
  JeidErrorFileNotFound = 2,
/// 鍵が無効です
  JeidErrorInvalidKey = 3,
/// 暗証番号が無効です
  JeidErrorInvalidPin = 4,
/// セキュリティステータスが満たされていません
  JeidErrorSecurityStatusNotSatisfied = 5,
/// 署名検証に失敗しました
  JeidErrorSignatureVerificationFailed = 6,
/// 送受信に失敗しました
  JeidErrorTransceiveFailed = 7,
/// 予期しない応答がありました
  JeidErrorUnexpectedResponse = 8,
/// サポートされていない操作です
  JeidErrorUnsupportedOperation = 9,
};

@protocol NFCISO7816Tag;
@class PassportAP;
@class ResidenceCardAP;

/// JeidReaderは、各種APのインスタンスを取得するために使用するクラスです。
SWIFT_CLASS("_TtC7libjeid10JeidReader") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface JeidReader : NSObject
/// コンストラクタ
/// \param tag ISO7816タグ
///
- (nullable instancetype)init:(id <NFCISO7816Tag> _Nonnull)tag error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// コンストラクタ
/// \param driver NFC Driver
///
- (nullable instancetype)initWithDriver:(id <NFCDriver> _Nonnull)driver error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL debug;
/// カード種別を判別します(Objective-C用)
///
/// throws:
/// カード種別の判別に失敗した場合、エラーがスローされます
///
/// returns:
/// カード種別を表す数値
- (NSNumber * _Nullable)detectCardTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許証AP
- (DriverLicenseAP * _Nullable)selectDLAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面入力補助AP
- (INTextAP * _Nullable)selectINTextAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面AP
- (INVisualAP * _Nullable)selectINVisualAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// パスポートAPのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// パスポートAP
- (PassportAP * _Nullable)selectEPAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 在留カードAPのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP
- (ResidenceCardAP * _Nullable)selectRCAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// PassportAPはパスポートAPを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid10PassportAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface PassportAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// Basic Access Control (BAC)用の鍵交換を行います
/// \param epKey パスポート番号、生年月日、有効期限から作成した<code>EPKey</code>オブジェクト
///
///
/// throws:
/// 鍵交換に失敗した場合、エラーがスローされます
- (BOOL)startBAC:(EPKey * _Nonnull)epKey error:(NSError * _Nullable * _Nullable)error;
/// パスポートAP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP内のすべてのデータ
- (EPFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Active Authenticationを行います(Objective-C用)。
/// note:
/// Active Authenticationをサポートしないパスポートの場合は<code>JeidError.fileNotFound(message:)</code>がスローされます
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param files <code>EPFiles</code>オブジェクト
///
///
/// throws:
/// 認証中に発生したエラーがスローされます
///
/// returns:
/// 認証に成功した場合は<code>true</code>、そうでない場合は<code>false</code>
- (NSNumber * _Nullable)activeAuthentication:(EPFiles * _Nonnull)files error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCAddressは、在留カードおよび特別永住者証明書の住居地（裏面追記）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid9RCAddress")
@interface RCAddress : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 追記書き込み年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable date;
/// 市区町村コードを返します
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// 住居地を返します
@property (nonatomic, readonly, copy) NSString * _Nullable address;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCardEntriesは、在留カードおよび特別永住者証明書の券面（表）イメージ(DF1/EF01)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13RCCardEntries")
@interface RCCardEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 券面（表）イメージをTIFF形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable tiffData;
/// 券面（表）イメージをPNG形式で返します
///
/// throws:
/// TIFFからPNGへの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面（表）イメージ(PNG)
- (NSData * _Nullable)pngDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCardTypeは、在留カードおよび特別永住者証明書のカード種別に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid10RCCardType")
@interface RCCardType : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// カード種別を返します
@property (nonatomic, readonly, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCommonDataは、在留カードおよび特別永住者証明書の共通データ要素に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12RCCommonData")
@interface RCCommonData : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 仕様バージョン番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCComprehensivePermissionは、在留カードの裏面資格外活動包括許可欄（DF2/EF02）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid25RCComprehensivePermission")
@interface RCComprehensivePermission : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 資格外活動包括許可を返します
@property (nonatomic, readonly, copy) NSString * _Nullable permission;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RCPhoto;
@class RCIndividualPermission;
@class RCUpdateStatus;
@class RCSignature;

/// RCFilesは、在留カードAPの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7RCFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface RCFiles : CardFiles
/// 共通データ要素を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (RCCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// カード種別を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// カード種別
- (RCCardType * _Nullable)getCardTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面（表）イメージを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面（表）イメージ
- (RCCardEntries * _Nullable)getCardEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 顔画像を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 顔画像
- (RCPhoto * _Nullable)getPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 住居地（裏面追記）を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 住居地（裏面追記）
- (RCAddress * _Nullable)getAddressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面資格外活動包括許可欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面資格外活動包括許可欄
- (RCComprehensivePermission * _Nullable)getComprehensivePermissionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面資格外活動個別許可欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面資格外活動個別許可欄
- (RCIndividualPermission * _Nullable)getIndividualPermissionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面在留期間等更新申請欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面在留期間等更新申請欄
- (RCUpdateStatus * _Nullable)getUpdateStatusAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// チェックコード・公開鍵証明書を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// チェックコード・公開鍵証明書
- (RCSignature * _Nullable)getSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// RCIndividualPermissionは、在留カードの裏面資格外活動個別許可欄（DF2/EF03）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid22RCIndividualPermission")
@interface RCIndividualPermission : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 資格外活動個別許可を返します
@property (nonatomic, readonly, copy) NSString * _Nullable permission;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCKeyは在留カード等番号に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid5RCKey")
@interface RCKey : NSObject
/// コンストラクタ
/// \param number 在留カード等番号
///
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)number error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCPhotoは、在留カードおよび特別永住者証明書の顔画像(DF1/EF02)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid7RCPhoto")
@interface RCPhoto : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 顔写真(JPEG2000)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCSignatureは、在留カードおよび特別永住者証明書のチェックコード・公開鍵証明書(DF3/EF01)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid11RCSignature") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface RCSignature : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// チェックコードを返します
@property (nonatomic, readonly, copy) NSData * _Nullable checkcode;
/// 公開鍵証明書を返します
@property (nonatomic, readonly) SecCertificateRef _Nullable certificate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCUpdateStatusは、在留カードの裏面在留期間等更新申請欄（DF2/EF04）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14RCUpdateStatus") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface RCUpdateStatus : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 在留期間更新等許可申請ステータスコードを返します
@property (nonatomic, readonly, copy) NSString * _Nullable status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ResidenceCardAPは在留カードAPを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid15ResidenceCardAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface ResidenceCardAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// アクセスコントロール(AC)を開始します
/// <br>
/// 以降の端末とカード間の通信はセキュアメッセージング(SM)により適宜暗号化されます。
/// 在留カード等番号による認証も行われます。
/// note:
/// 在留カードAPのSMはパスポートのBACに相当します
/// \param rcKey 在留カード等番号から作成した<code>RCKey</code>オブジェクト
///
///
/// throws:
/// SMの鍵交換に失敗した場合、エラーがスローされます
- (BOOL)startAC:(RCKey * _Nonnull)rcKey error:(NSError * _Nullable * _Nullable)error;
/// 在留カードAP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP内のすべてのデータ
- (RCFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ValidationParametersは、署名検証の動作を調整するパラメータを表すクラスです。
SWIFT_CLASS("_TtC7libjeid20ValidationParameters")
@interface ValidationParameters : NSObject
/// コンストラクタ
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, copy) NSString * _Nonnull country;
/// 検証標準時刻
@property (nonatomic, copy) NSDate * _Nullable date;
/// 個人番号カードにおいて個人番号を検証するかどうか
/// remark:
/// true(デフォルト値)の場合、個人番号の署名検証を行います
@property (nonatomic) BOOL validateMyNumber;
/// 個人番号カードにおいて属性情報を検証するかどうか
/// remark:
/// true(デフォルト値)の場合、署名検証を行います
@property (nonatomic) BOOL validateAttributes;
@end

enum ValidationResultStatus : NSInteger;

/// ValidationResultは、署名検証結果を表すクラスです。
SWIFT_CLASS("_TtC7libjeid16ValidationResult")
@interface ValidationResult : NSObject
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) enum ValidationResultStatus status;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// ValidationResultStatusは、署名検証結果の状態を表すクラスです。
typedef SWIFT_ENUM(NSInteger, ValidationResultStatus, open) {
/// 有効
  ValidationResultStatusVALID = 0,
/// 署名値の検証に失敗
  ValidationResultStatusINVALID_SIGNATURE = 1,
/// 証明書の検証に失敗
  ValidationResultStatusINVALID_CERTIFICATE = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef LIBJEID_SWIFT_H
#define LIBJEID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="libjeid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSData;
@class NSDate;

/// CardFilesは、AP内の全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid9CardFiles")
@interface CardFiles : NSObject
/// コンストラクタ
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// パスに対応するデータを返します
/// remark:
/// パスが存在しない、またはパスに対応する値がnilのとき、nilが返ります
/// \param path パス
///
///
/// returns:
/// パスに対応するデータ
- (NSData * _Nullable)get:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// パスとパスに対応するデータを設定します
/// \param path パス
///
/// \param data パスに対応するデータ
///
- (void)put:(NSString * _Nonnull)path :(NSData * _Nullable)data;
@property (nonatomic, readonly, copy) NSDate * _Nonnull readDate;
@property (nonatomic, readonly, copy) NSData * _Nonnull sha256Digest;
@end

typedef SWIFT_ENUM(NSInteger, CardType, open) {
/// 不明
  CardTypeUNKNOWN = 0,
/// 個人番号カード
  CardTypeIN = 1,
/// 住基カード
  CardTypeJUKI = 2,
/// 運転免許証
  CardTypeDL = 3,
/// パスポート
  CardTypeEP = 4,
/// 在留カード
  CardTypeRC = 5,
};

@class NSNumber;

SWIFT_PROTOCOL("_TtP7libjeid9NFCDriver_")
@protocol NFCDriver
@optional
@property (nonatomic) BOOL _simulator;
@required
- (void)transmitWithCmd:(NSData * _Nonnull)cmd completion:(void (^ _Nonnull)(NSData * _Nullable, uint8_t, uint8_t, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC7libjeid13CoreNFCDriver") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface CoreNFCDriver : NSObject <NFCDriver>
- (void)transmitWithCmd:(NSData * _Nonnull)cmd completion:(void (^ _Nonnull)(NSData * _Nullable, uint8_t, uint8_t, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLDate;

/// DLCategoryは、運転免許証仕様の「免許の年月日」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid10DLCategory")
@interface DLCategory : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 免許の年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nonnull date;
/// タグを返します
@property (nonatomic, readonly) NSInteger tag;
/// 免許の種別名を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 保有している免許種別かどうかをチェックします
/// note:
/// 保有していればtrue、していなければfalseを返します
@property (nonatomic, readonly) BOOL isLicensed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLChangedEntry;

/// DLChangedEntriesは、運転免許証仕様の「記載事項変更等(本籍除く)」および「記載事項変更(本籍)」に対応するクラスです。
/// DriverLicenseAP#readChangedEntries() および DriverLicenseAP#readChangedRegisteredDomicile() を使用して取得します。
SWIFT_CLASS("_TtC7libjeid16DLChangedEntries")
@interface DLChangedEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 追記の有無を返します
/// note:
/// 追記がある場合はtrue、ない場合はfalseを返します
@property (nonatomic, readonly) BOOL isChanged;
/// 新公安委員会名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newPscNameList;
/// 新公安委員会名の配列を返します
/// important:
/// <code>newPscNameList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newPscNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newPscNameList");
/// 新氏名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newNameList;
/// 新氏名の配列を返します
/// important:
/// <code>newNameList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newNameList");
/// 新呼び名の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newKanaList;
/// 新呼び名の配列を返します
/// important:
/// <code>newKanaList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newCallNames SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newKanaList");
/// 新住所の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newAddressList;
/// 新住所の配列を返します
/// important:
/// <code>newAddressList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newAddresses SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newAddressList");
/// 新条件の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newConditionList;
/// 新条件の配列を返します
/// important:
/// <code>newConditionList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newConditions SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newConditionList");
/// 条件解除の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull conditionCancellationList;
/// 条件解除の配列を返します
/// important:
/// <code>conditionCancellationList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable conditionCancellations SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use conditionCancellationList");
/// 備考の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull remarkList;
/// 備考の配列を返します
/// important:
/// <code>remarkList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable remarks SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use remarkList");
/// 予備の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull reserveList;
/// 予備の配列を返します
/// important:
/// <code>reserveList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable reserves SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use reserveList");
/// 新本籍の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLChangedEntry *> * _Nonnull newRegisteredDomicileList;
/// 新本籍の配列を返します
/// important:
/// <code>newRegisteredDomicileList</code>をご使用ください
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable newRegisteredDomiciles SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use newRegisteredDomicileList");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLString;

/// DLChangedEntryは、運転免許証仕様の「記載事項変更等(本籍除く)」および「記載事項変更(本籍)」に記載される1つの項目に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14DLChangedEntry")
@interface DLChangedEntry : NSObject
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 追記項目の日付を返します
@property (nonatomic, readonly, strong) DLDate * _Nonnull date;
/// 追記項目の値を返します
@property (nonatomic, readonly, strong) DLString * _Nonnull value;
/// 追記項目の公安委員会名を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull psc;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLCommonDataは、運転免許証仕様の「共通データ要素」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12DLCommonData")
@interface DLCommonData : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 仕様書バージョン番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// 交付年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable issueDate;
/// 有効期間の末日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable expireDate;
/// カード製造業者識別子を返します
@property (nonatomic, readonly) uint8_t manufacturerID;
/// 暗号関数識別子を返します
@property (nonatomic, readonly) uint8_t encryptionID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLDateは、元号+YYMMDD形式の日付クラスです。
SWIFT_CLASS("_TtC7libjeid6DLDate")
@interface DLDate : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// インスタンスに対応するDateオブジェクトを返します
@property (nonatomic, readonly, copy) NSDate * _Nonnull dateValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLExternalCharacters;

/// DLEntriesは、運転免許証仕様の「記載事項(本籍除く)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid9DLEntries")
@interface DLEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// JIS X 0208制定年番号を返します
@property (nonatomic, readonly) uint8_t jisx0208year;
/// 氏名を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull name;
/// 氏名をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>name.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 氏名のHTML表現
- (NSString * _Nullable)nameHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use name.toHTML()");
/// 氏名をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>name.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 氏名のJSON表現
- (NSString * _Nullable)nameJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'nameJson' has been renamed to 'name.toJSON()': please use name.toJSON()");
/// 呼び名(カナ)を返します
@property (nonatomic, readonly, copy) NSString * _Nullable kana;
/// 通称名を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull aliasName;
/// 通称名をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>aliasName.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 通称名のHTML表現
- (NSString * _Nullable)aliasNameHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use aliasName.toHTML()");
/// 通称名をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>aliasName.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 通称名のJSON表現
- (NSString * _Nullable)aliasNameJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'aliasNameJson' has been renamed to 'aliasName.toJSON()': please use aliasName.toJSON()");
/// 統一氏名(カナ)を返します
@property (nonatomic, readonly, copy) NSString * _Nullable callName;
/// 生年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable birthDate;
/// 住所を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull address;
/// 住所をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>address.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 住所のHTML表現
- (NSString * _Nullable)addressHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use address.toHTML()");
/// 住所をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>address.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 住所のJSON表現
- (NSString * _Nullable)addressJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'addressJson' has been renamed to 'address.toJSON()': please use address.toJSON()");
/// 交付年月日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable issueDate;
/// 照会番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable refNumber;
/// 免許証の色区分を返します
@property (nonatomic, readonly, copy) NSString * _Nullable colorClass;
/// 有効期間の末日を返します
@property (nonatomic, readonly, strong) DLDate * _Nullable expireDate;
/// 免許の条件の配列を返します
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable conditions;
/// 免許の条件のHTML表現の配列を返します
/// important:
/// <code>conditions</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許の条件のHTML表現の配列
- (NSArray<NSString *> * _Nullable)conditionsHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use conditions");
/// 免許の条件のJSON表現の配列を返します
/// important:
/// <code>conditions</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許の条件のJSON表現の配列
- (NSArray<NSString *> * _Nullable)conditionsJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="please use conditions");
/// 公安委員会名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable pscName;
/// 免許証の番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable licenseNumber;
/// 免許証の年月日の配列を返します
@property (nonatomic, readonly, copy) NSArray<DLCategory *> * _Nullable categories;
/// タグを指定して免許の年月日を返します
/// \param tag タグ
///
///
/// returns:
/// 免許の年月日
- (DLCategory * _Nullable)category:(NSInteger)tag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLExternalCharactersは、運転免許証仕様の「外字」および「記載事項変更(外字)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid20DLExternalCharacters")
@interface DLExternalCharacters : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 追記の有無を返します
/// note:
/// 追記がある場合はtrue、ない場合はfalseを返します
@property (nonatomic, readonly) BOOL isChanged;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DLPinSetting;
@class DLRegisteredDomicile;
@class DLSignature;
@class DLPhoto;
@class ValidationResult;
@class ValidationParameters;

/// DLFilesは、運転免許証APの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7DLFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DLFiles : CardFiles
/// 共通データ要素を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (DLCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 暗証番号(PIN)設定を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 暗証番号(PIN)設定
- (DLPinSetting * _Nullable)getPinSettingAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍除く)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍除く)
- (DLEntries * _Nullable)getEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍)
- (DLRegisteredDomicile * _Nullable)getRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 外字を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 外字
- (DLExternalCharacters * _Nullable)getExternalCharactersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更等(本籍除く)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更等(本籍除く)
- (DLChangedEntries * _Nullable)getChangedEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLChangedEntries * _Nullable)getChangedRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 電子署名を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 電子署名
- (DLSignature * _Nullable)getSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLPhoto * _Nullable)getPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// DLPhotoは、運転免許証仕様の「写真」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid7DLPhoto")
@interface DLPhoto : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 顔写真(JPEG2000)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLPinSettingは、運転免許証仕様の「暗証番号(PIN)設定」に対応するクラスです。
/// <br>
/// 極めて稀に、暗証番号が設定されていない免許証があります。<br>
/// 暗証番号が設定されていない免許証はデフォルトの暗証番号「****」を入力して読み出します。<br>
/// <code>isPinSet</code>プロパティで暗証番号が設定されているかどうかを確認できます。
SWIFT_CLASS("_TtC7libjeid12DLPinSetting")
@interface DLPinSetting : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 暗証番号(PIN)が設定されているかどうかを返します
/// note:
/// 暗証番号(PIN)が設定されている場合はtrue、そうでない場合はfalseを返します
@property (nonatomic, readonly) BOOL isPinSet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLRegisteredDomicileは、運転免許証仕様の「記載事項(本籍)」に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid20DLRegisteredDomicile")
@interface DLRegisteredDomicile : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 本籍を<code>DLString</code>オブジェクトで返します
@property (nonatomic, readonly, strong) DLString * _Nonnull registeredDomicile;
/// 本籍をHTML表現で返します
/// <br>
/// 外字をPNGエンコードしてData URI形式で表示します。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>registeredDomicile.toHTML()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 本籍のHTML表現
- (NSString * _Nullable)registeredDomicileHtml:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use registeredDomicile.toHTML()");
/// 本籍をJSON表現で返します
/// <br>
/// JIS X 0208に含まれる文字の場合は、Unicodeテキストが返ります。
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
/// important:
/// <code>registeredDomicile.toJSON()</code>をご使用ください
/// \param extChars 外字
///
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 本籍のJSON表現
- (NSString * _Nullable)registeredDomicileJson:(DLExternalCharacters * _Nonnull)extChars error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,unavailable,message="'registeredDomicileJson' has been renamed to 'registeredDomicile.toJSON()': please use registeredDomicile.toJSON()");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLSignatureは、運転免許証仕様の「電子署名」に対応するクラスです。
/// remark:
/// このオブジェクトは署名を検証することができます。署名の検証に使用する場合、３つの段階があります。<ol>
/// <li>初期化
/// <p>このオブジェクトを初期化します。`initVerify`メソッドを参照してください。</p>
/// </li>
/// <li>更新
/// <p>検証の対象となるデータを更新します。`update`メソッドを参照してください。</p>
/// </li>
/// <li>署名の検証
/// <p>すべての更新済みデータに対して署名の検証を行います。`verify`メソッドを参照してください。</p>
/// </li></ol>
SWIFT_CLASS("_TtC7libjeid11DLSignature") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DLSignature : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 電子署名を返します
@property (nonatomic, readonly, copy) NSData * _Nullable signature;
/// シリアルを返します
@property (nonatomic, readonly, copy) NSData * _Nullable serial;
/// 発行者名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable issuer;
/// 主体者名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable subject;
/// 主体者鍵識別子を返します
@property (nonatomic, readonly, copy) NSData * _Nullable subjectKeyIdentifier;
/// 検証操作のための初期化を行います
/// <br>
/// このメソッドによる検証処理は非推奨となります。
/// important:
/// <code>DLFiles.validate()</code>をご使用ください
///
/// throws:
/// 初期化に失敗した場合、エラーがスローされます
- (BOOL)initVerifyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use DLFiles.validate()");
/// 指定されたbyteバッファを使用して、検証対象のデータを更新します
/// <br>
/// このメソッドによる検証処理は非推奨となります。
/// important:
/// <code>DLFiles.validate()</code>をご使用ください
/// \param data 更新に使用するbyteバッファ
///
///
/// throws:
/// 更新に失敗した場合、エラーがスローされます
- (BOOL)update:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="please use DLFiles.validate()");
/// 署名を検証します(Objective-C用)
///
/// throws:
/// 検証に失敗した場合、エラーがスローされます
///
/// returns:
/// 署名が検証された場合はtrue、そうでない場合はfalse
- (NSNumber * _Nullable)verifyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DLStringは、運転免許証で利用される外字を含む文字列クラスです。
/// <br>
/// <code>toString()</code>を使用してこのオブジェクトを文字列として表現できます。
/// 1つめの外字は【※１】、7つめの外字は【※７】、欠字は【※欠】と表現されます。
/// <br>
/// <code>toJSON()</code>や<code>toHTML()</code>を使用して外字を含む文字列を様々なフォーマットで表現できます。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
SWIFT_CLASS("_TtC7libjeid8DLString")
@interface DLString : NSObject
/// インスタンスの説明を返します
/// <code>toString()</code>と同じ結果が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 文字列が空かどうかを返します
/// note:
/// 空の場合、<code>true</code>が返ります
@property (nonatomic, readonly) BOOL isEmpty;
/// 文字列が外字を含むかどうかを返します
/// note:
/// 外字を含む場合、<code>true</code>が返ります
@property (nonatomic, readonly) BOOL hasExtChars;
/// 運転免許証文字列をテキスト表現で返します
/// <br>
/// 1つめの外字は【※１】、7つめの外字は【※７】、欠字は【※欠】と表現されます。
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// returns:
/// 運転免許証文字列のテキスト表現
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
/// 運転免許証文字列をHTML表現で返します
/// <br>
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// throws:
/// 外字データの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証文字列のHTML表現
- (NSString * _Nullable)toHTMLAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 運転免許証文字列をJSON表現で返します
/// <br>
/// 詳細は<a href="https://www.osstech.co.jp/download/libjeid/driver-license/">運転免許証の文字について</a>をご参照ください。
///
/// throws:
/// 外字データの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証文字列のJSON表現
- (NSString * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JeidReader;

/// DriverLicenseAPは免許証APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid15DriverLicenseAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface DriverLicenseAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 免許証APの暗証番号1のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPin1AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APの暗証番号2のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPin2AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APの暗証番号1を入力します
/// \param pin 暗証番号1(4桁)
///
///
/// throws:
/// 暗証番号の入力に失敗した場合、エラーがスローされます
- (BOOL)verifyPin1:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 免許証APの暗証番号2を入力します
/// \param pin 暗証番号2(4桁)
///
///
/// throws:
/// 暗証番号の入力に失敗した場合、エラーがスローされます
- (BOOL)verifyPin2:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 運転免許証内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 運転免許証内のすべてのデータ
- (DLFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 共通データ要素を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (DLCommonData * _Nullable)readCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍除く)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍除く)
- (DLEntries * _Nullable)readEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項(本籍)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項(本籍)
- (DLRegisteredDomicile * _Nullable)readRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 外字を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 外字
- (DLExternalCharacters * _Nullable)readExternalCharactersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更等(本籍除く)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更等(本籍除く)
- (DLChangedEntries * _Nullable)readChangedEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 記載事項変更(本籍)を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 記載事項変更(本籍)
- (DLChangedEntries * _Nullable)readChangedRegisteredDomicileAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 電子署名を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 電子署名
- (DLSignature * _Nullable)readSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 写真を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 写真
- (DLPhoto * _Nullable)readPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPDataGroupは、パスポートのDataGroupに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid11EPDataGroup")
@interface EPDataGroup : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// FIDを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull fid;
/// short FIDを返します
@property (nonatomic, readonly) uint8_t shortFID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPCommonDataは、パスポートのCommonDataに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPCommonData")
@interface EPCommonData : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// LDSバージョンを返します
@property (nonatomic, readonly, copy) NSString * _Nullable ldsVersion;
/// Unicodeバージョンを返します
@property (nonatomic, readonly, copy) NSString * _Nullable unicodeVersion;
/// Tag Listを返します
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull tagList;
@end



/// EPDataGroup1は、パスポートのDG1に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup1")
@interface EPDataGroup1 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// MRZの文字列を返します
@property (nonatomic, readonly, copy) NSString * _Nullable mrz;
@end


/// EPDataGroup10は、パスポートのDG10に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup10")
@interface EPDataGroup10 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup11は、パスポートのDG11に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup11")
@interface EPDataGroup11 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup12は、パスポートのDG12に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup12")
@interface EPDataGroup12 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup13は、パスポートのDG13に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup13")
@interface EPDataGroup13 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup14は、パスポートのDG14に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup14")
@interface EPDataGroup14 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup15は、パスポートのDG15に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13EPDataGroup15") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface EPDataGroup15 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup2は、パスポートのDG2に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup2")
@interface EPDataGroup2 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 顔写真(JPEG)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable faceJpeg;
@end


/// EPDataGroup3は、パスポートのDG3に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup3")
@interface EPDataGroup3 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup4は、パスポートのDG4に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup4")
@interface EPDataGroup4 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup5は、パスポートのDG5に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup5")
@interface EPDataGroup5 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup6は、パスポートのDG6に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup6")
@interface EPDataGroup6 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup7は、パスポートのDG7に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup7")
@interface EPDataGroup7 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup8は、パスポートのDG8に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup8")
@interface EPDataGroup8 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// EPDataGroup9は、パスポートのDG9に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12EPDataGroup9")
@interface EPDataGroup9 : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class EPSecurityObject;

/// EPDocumentSecurityObjectは、パスポートのSODに対応するクラスです。
SWIFT_CLASS("_TtC7libjeid24EPDocumentSecurityObject")
@interface EPDocumentSecurityObject : EPDataGroup
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, strong) EPSecurityObject * _Nullable securityObject;
@end


/// EPFilesは、パスポートAPの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7EPFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface EPFiles : CardFiles
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Common Dataを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Common Data
- (EPCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Document Security Objectを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Document Security Object
- (EPDocumentSecurityObject * _Nullable)getDocumentSecurityObjectAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 1を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 1
- (EPDataGroup1 * _Nullable)getDataGroup1AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 2を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 2
- (EPDataGroup2 * _Nullable)getDataGroup2AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 3を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 3
- (EPDataGroup3 * _Nullable)getDataGroup3AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 4を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 4
- (EPDataGroup4 * _Nullable)getDataGroup4AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 5を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 5
- (EPDataGroup5 * _Nullable)getDataGroup5AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 13を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 13
- (EPDataGroup13 * _Nullable)getDataGroup13AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 14を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 14
- (EPDataGroup14 * _Nullable)getDataGroup14AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Data Group 15を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// Data Group 15
- (EPDataGroup15 * _Nullable)getDataGroup15AndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7libjeid5EPKey")
@interface EPKey : NSObject
/// コンストラクタ
/// \param passportNumber パスポート番号
///
/// \param birthDate 生年月日(YYMMDDの6桁)
///
/// \param expirationDate 有効期限(YYMMDDの6桁)
///
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)passportNumber :(NSString * _Nonnull)birthDate :(NSString * _Nonnull)expirationDate error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// EPMRZは、パスポートのMachine Readable Zone (MRZ)に記載された情報に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid5EPMRZ")
@interface EPMRZ : NSObject
/// コンストラクタ
/// \param mrz MRZ文字列
///
///
/// throws:
/// デコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)mrz error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// ドキュメントコードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull documentCode;
/// 発行国または組織のコードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull issuingCountry;
/// 氏名を返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 姓を返します
/// remark:
/// 名前を姓と名の形にパースできなかった場合は空の文字列が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull surname;
/// 名を返します
/// remark:
/// 名前を姓と名の形にパースできなかった場合は空の文字列が返ります
@property (nonatomic, readonly, copy) NSString * _Nonnull givenName;
/// パスポート番号を返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull passportNumber;
/// パスポート番号のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull passportNumberCheckDigit;
/// 国籍コードを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull nationality;
/// 生年月日(YYMMDD)を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull birthDate;
/// 生年月日のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull birthDateCheckDigit;
/// 性別を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull sex;
/// 有効期限(YYMMDD)を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDate;
/// 有効期限のチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull expirationDateCheckDigit;
/// オプションデータを返します
/// remark:
/// フィールドの値をそのまま返すため、値の後ろが「<」でパディングされている可能性があります
@property (nonatomic, readonly, copy) NSString * _Nonnull optionalData;
/// オプションデータのチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull optionalDataCheckDigit;
/// パスポート番号、生年月日、有効期限、オプショナルデータおよびそれぞれのチェックディジットによる複合データのチェックディジットを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull compositeCheckDigit;
/// MRZの文字列すべてを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull mrz;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7libjeid16EPSecurityObject")
@interface EPSecurityObject : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// ハッシュアルゴリズムのOIDを返します
@property (nonatomic, readonly, copy) NSString * _Nonnull hashAlgorithm;
/// ハッシュ値を返します
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSData *> * _Nonnull hashValues;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FlavorType, open) {
  FlavorTypeFREE = 0,
  FlavorTypeFULL = 1,
};

@class INTextFiles;
@class INTextMyNumber;
@class INTextAttributes;

/// INTextAPは券面入力補助APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid8INTextAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INTextAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 券面入力補助APの暗証番号のカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの暗証番号を入力します
/// \param pin 暗証番号(4桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPin:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの照合番号Aのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの照合番号Aを入力します
/// \param pin 照合番号A(12桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinA:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの照合番号Bのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinBAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APの照合番号Bを入力します
/// \param pin 照合番号B(14桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinB:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 個人番号カードの券面入力補助AP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面入力補助AP内のすべてのデータ
- (INTextFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を取得します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INTextMyNumber * _Nullable)readMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 4情報を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 4情報
- (INTextAttributes * _Nullable)readAttributesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INTextAttributesは、個人番号カードの券面入力補助APの4情報(氏名・住所・生年月日・性別)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid16INTextAttributes")
@interface INTextAttributes : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// ヘッダを返します
@property (nonatomic, readonly, copy) NSData * _Nullable header;
/// 氏名を返します
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// 住所を返します
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// 生年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
/// 性別を性別コードで返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// 性別を性別コードに対応する文字列で返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sexString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INTextFilesは、個人番号カードの券面入力補助AP内のデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid11INTextFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INTextFiles : CardFiles
/// <code>INTextFiles</code>オブジェクトをシリアライズします
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
///
/// returns:
/// シリアライズされたバイナリ
- (NSData * _Nullable)dumpAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を返します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INTextMyNumber * _Nullable)getMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 4情報(氏名、住所、生年月日、性別)を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 4情報(氏名、住所、生年月日、性別)
- (INTextAttributes * _Nullable)getAttributesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// INTextMyNumberは、個人番号カードの券面入力補助APの個人番号(文字列)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14INTextMyNumber")
@interface INTextMyNumber : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 個人番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable myNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class INVisualFiles;
@class INVisualEntries;
@class INVisualMyNumber;

/// INVisualAPは券面APを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid10INVisualAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// 券面APの照合番号Aのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinAAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APの照合番号Aを入力します
/// \param pin 照合番号A(12桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinA:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面APの照合番号Bのカウンタを取得します(Objective-C用)
///
/// throws:
/// カウンタの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// カウンタ
- (NSNumber * _Nullable)getPinBAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APの照合番号Bを入力します
/// \param pin 照合番号B(14桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPinB:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 券面入力補助APの暗証番号を入力します
/// \param pin 暗証番号(4桁)
///
///
/// throws:
/// 認証に失敗した場合、エラーがスローされます
- (BOOL)verifyPin:(NSString * _Nonnull)pin error:(NSError * _Nullable * _Nullable)error;
/// 個人番号カードの券面AP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面AP内のすべてのデータ
- (INVisualFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面の表面を取得します
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面の表面
- (INVisualEntries * _Nullable)readEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を取得します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INVisualMyNumber * _Nullable)readMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INVisualEntriesは、個人番号カードの券面APの表面に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid15INVisualEntries") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// ヘッダを返します
@property (nonatomic, readonly, copy) NSData * _Nullable header;
/// 生年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
/// 性別を性別コードで返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sex;
/// 性別を性別コードに対応する文字列で返します
/// remark:
/// 1: 男性, 2: 女性, 3: 不明
@property (nonatomic, readonly, copy) NSString * _Nullable sexString;
/// 氏名をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable name;
/// 住所をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable address;
/// 顔写真をJPEG2000形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
/// 電子署名を返します
@property (nonatomic, readonly, copy) NSData * _Nullable signature;
/// 有効期限を返します
@property (nonatomic, readonly, copy) NSString * _Nullable expireDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// INVisualFilesは、個人番号カードの券面AP内のデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid13INVisualFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualFiles : CardFiles
/// 券面の表面を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面の表面
- (INVisualEntries * _Nullable)getEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 個人番号を返します
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 個人番号
- (INVisualMyNumber * _Nullable)getMyNumberAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// INVisualMyNumberは、個人番号カードの券面APの個人番号(画像)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid16INVisualMyNumber") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface INVisualMyNumber : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 個人番号をPNG形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable myNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// JeidErrorの各caseのエラーコード(Objective-C用)
typedef SWIFT_ENUM_NAMED(NSInteger, JeidError, "JeidErrorCode", open) {
/// デコードに失敗しました
  JeidErrorDecodeFailed = 0,
/// エンコードに失敗しました
  JeidErrorEncodeFailed = 1,
/// ファイルがありません
  JeidErrorFileNotFound = 2,
/// 鍵が無効です
  JeidErrorInvalidKey = 3,
/// 暗証番号が無効です
  JeidErrorInvalidPin = 4,
/// セキュリティステータスが満たされていません
  JeidErrorSecurityStatusNotSatisfied = 5,
/// 署名検証に失敗しました
  JeidErrorSignatureVerificationFailed = 6,
/// 送受信に失敗しました
  JeidErrorTransceiveFailed = 7,
/// 予期しない応答がありました
  JeidErrorUnexpectedResponse = 8,
/// サポートされていない操作です
  JeidErrorUnsupportedOperation = 9,
};

@protocol NFCISO7816Tag;
@class PassportAP;
@class ResidenceCardAP;

/// JeidReaderは、各種APのインスタンスを取得するために使用するクラスです。
SWIFT_CLASS("_TtC7libjeid10JeidReader") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface JeidReader : NSObject
/// コンストラクタ
/// \param tag ISO7816タグ
///
- (nullable instancetype)init:(id <NFCISO7816Tag> _Nonnull)tag error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// コンストラクタ
/// \param driver NFC Driver
///
- (nullable instancetype)initWithDriver:(id <NFCDriver> _Nonnull)driver error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL debug;
/// カード種別を判別します(Objective-C用)
///
/// throws:
/// カード種別の判別に失敗した場合、エラーがスローされます
///
/// returns:
/// カード種別を表す数値
- (NSNumber * _Nullable)detectCardTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 免許証APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 免許証AP
- (DriverLicenseAP * _Nullable)selectDLAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面入力補助APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面入力補助AP
- (INTextAP * _Nullable)selectINTextAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面APのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面AP
- (INVisualAP * _Nullable)selectINVisualAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// パスポートAPのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// パスポートAP
- (PassportAP * _Nullable)selectEPAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 在留カードAPのハンドラを返します
///
/// throws:
/// ハンドラの取得に失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP
- (ResidenceCardAP * _Nullable)selectRCAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// PassportAPはパスポートAPを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid10PassportAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface PassportAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// Basic Access Control (BAC)用の鍵交換を行います
/// \param epKey パスポート番号、生年月日、有効期限から作成した<code>EPKey</code>オブジェクト
///
///
/// throws:
/// 鍵交換に失敗した場合、エラーがスローされます
- (BOOL)startBAC:(EPKey * _Nonnull)epKey error:(NSError * _Nullable * _Nullable)error;
/// パスポートAP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP内のすべてのデータ
- (EPFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Active Authenticationを行います(Objective-C用)。
/// note:
/// Active Authenticationをサポートしないパスポートの場合は<code>JeidError.fileNotFound(message:)</code>がスローされます
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param files <code>EPFiles</code>オブジェクト
///
///
/// throws:
/// 認証中に発生したエラーがスローされます
///
/// returns:
/// 認証に成功した場合は<code>true</code>、そうでない場合は<code>false</code>
- (NSNumber * _Nullable)activeAuthentication:(EPFiles * _Nonnull)files error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCAddressは、在留カードおよび特別永住者証明書の住居地（裏面追記）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid9RCAddress")
@interface RCAddress : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 追記書き込み年月日を返します
@property (nonatomic, readonly, copy) NSString * _Nullable date;
/// 市区町村コードを返します
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// 住居地を返します
@property (nonatomic, readonly, copy) NSString * _Nullable address;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCardEntriesは、在留カードおよび特別永住者証明書の券面（表）イメージ(DF1/EF01)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid13RCCardEntries")
@interface RCCardEntries : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 券面（表）イメージをTIFF形式で返します
@property (nonatomic, readonly, copy) NSData * _Nullable tiffData;
/// 券面（表）イメージをPNG形式で返します
///
/// throws:
/// TIFFからPNGへの変換に失敗した場合、エラーがスローされます
///
/// returns:
/// 券面（表）イメージ(PNG)
- (NSData * _Nullable)pngDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCardTypeは、在留カードおよび特別永住者証明書のカード種別に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid10RCCardType")
@interface RCCardType : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// カード種別を返します
@property (nonatomic, readonly, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCCommonDataは、在留カードおよび特別永住者証明書の共通データ要素に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid12RCCommonData")
@interface RCCommonData : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 仕様バージョン番号を返します
@property (nonatomic, readonly, copy) NSString * _Nullable version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCComprehensivePermissionは、在留カードの裏面資格外活動包括許可欄（DF2/EF02）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid25RCComprehensivePermission")
@interface RCComprehensivePermission : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 資格外活動包括許可を返します
@property (nonatomic, readonly, copy) NSString * _Nullable permission;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RCPhoto;
@class RCIndividualPermission;
@class RCUpdateStatus;
@class RCSignature;

/// RCFilesは、在留カードAPの全てのデータを格納するクラスです。
SWIFT_CLASS("_TtC7libjeid7RCFiles") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface RCFiles : CardFiles
/// 共通データ要素を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 共通データ要素
- (RCCommonData * _Nullable)getCommonDataAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// カード種別を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// カード種別
- (RCCardType * _Nullable)getCardTypeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 券面（表）イメージを返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 券面（表）イメージ
- (RCCardEntries * _Nullable)getCardEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 顔画像を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 顔画像
- (RCPhoto * _Nullable)getPhotoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 住居地（裏面追記）を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// 住居地（裏面追記）
- (RCAddress * _Nullable)getAddressAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面資格外活動包括許可欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面資格外活動包括許可欄
- (RCComprehensivePermission * _Nullable)getComprehensivePermissionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面資格外活動個別許可欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面資格外活動個別許可欄
- (RCIndividualPermission * _Nullable)getIndividualPermissionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 裏面在留期間等更新申請欄を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます。特別永住者証明書の場合もエラーがスローされます
///
/// returns:
/// 裏面在留期間等更新申請欄
- (RCUpdateStatus * _Nullable)getUpdateStatusAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// チェックコード・公開鍵証明書を返します
///
/// throws:
/// データのパースに失敗した場合、エラーがスローされます
///
/// returns:
/// チェックコード・公開鍵証明書
- (RCSignature * _Nullable)getSignatureAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 規定の検証パラメータで真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 真正性検証を行います
/// <br>
/// 詳しくは<a href="https://www.osstech.co.jp/download/libjeid/validation-guide/">真正性検証ガイド</a>をご参照ください。
/// note:
/// 無償版の場合は<code>JeidError.unsupportedOperation(message:)</code>がスローされます
/// \param params 真正性検証パラメータ
///
///
/// throws:
/// 真正性の検証中に検証結果(<code>ValidationResult</code>)を返せない問題が発生した場合、エラーがスローされます
///
/// returns:
/// 真正性検証結果
- (ValidationResult * _Nullable)validate:(ValidationParameters * _Nonnull)params error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// RCIndividualPermissionは、在留カードの裏面資格外活動個別許可欄（DF2/EF03）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid22RCIndividualPermission")
@interface RCIndividualPermission : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 資格外活動個別許可を返します
@property (nonatomic, readonly, copy) NSString * _Nullable permission;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCKeyは在留カード等番号に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid5RCKey")
@interface RCKey : NSObject
/// コンストラクタ
/// \param number 在留カード等番号
///
///
/// throws:
/// エンコードに失敗した場合、エラーがスローされます
- (nullable instancetype)init:(NSString * _Nonnull)number error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCPhotoは、在留カードおよび特別永住者証明書の顔画像(DF1/EF02)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid7RCPhoto")
@interface RCPhoto : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 顔写真(JPEG2000)を返します
@property (nonatomic, readonly, copy) NSData * _Nullable photoData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCSignatureは、在留カードおよび特別永住者証明書のチェックコード・公開鍵証明書(DF3/EF01)に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid11RCSignature") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface RCSignature : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// チェックコードを返します
@property (nonatomic, readonly, copy) NSData * _Nullable checkcode;
/// 公開鍵証明書を返します
@property (nonatomic, readonly) SecCertificateRef _Nullable certificate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RCUpdateStatusは、在留カードの裏面在留期間等更新申請欄（DF2/EF04）に対応するクラスです。
SWIFT_CLASS("_TtC7libjeid14RCUpdateStatus") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface RCUpdateStatus : NSObject
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// 符号化データを返します
@property (nonatomic, readonly, copy) NSData * _Nonnull encoded;
/// 在留期間更新等許可申請ステータスコードを返します
@property (nonatomic, readonly, copy) NSString * _Nullable status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ResidenceCardAPは在留カードAPを操作するクラスです。
SWIFT_CLASS("_TtC7libjeid15ResidenceCardAP") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface ResidenceCardAP : NSObject
/// コンストラクタ
/// \param reader JeidReaderインスタンス
///
- (nonnull instancetype)init:(JeidReader * _Nonnull)reader OBJC_DESIGNATED_INITIALIZER;
/// アクセスコントロール(AC)を開始します
/// <br>
/// 以降の端末とカード間の通信はセキュアメッセージング(SM)により適宜暗号化されます。
/// 在留カード等番号による認証も行われます。
/// note:
/// 在留カードAPのSMはパスポートのBACに相当します
/// \param rcKey 在留カード等番号から作成した<code>RCKey</code>オブジェクト
///
///
/// throws:
/// SMの鍵交換に失敗した場合、エラーがスローされます
- (BOOL)startAC:(RCKey * _Nonnull)rcKey error:(NSError * _Nullable * _Nullable)error;
/// 在留カードAP内のすべてのデータを読み出します
///
/// throws:
/// 読み出しに失敗した場合、エラーがスローされます
///
/// returns:
/// 在留カードAP内のすべてのデータ
- (RCFiles * _Nullable)readFilesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ValidationParametersは、署名検証の動作を調整するパラメータを表すクラスです。
SWIFT_CLASS("_TtC7libjeid20ValidationParameters")
@interface ValidationParameters : NSObject
/// コンストラクタ
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// インスタンスの説明を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, copy) NSString * _Nonnull country;
/// 検証標準時刻
@property (nonatomic, copy) NSDate * _Nullable date;
/// 個人番号カードにおいて個人番号を検証するかどうか
/// remark:
/// true(デフォルト値)の場合、個人番号の署名検証を行います
@property (nonatomic) BOOL validateMyNumber;
/// 個人番号カードにおいて属性情報を検証するかどうか
/// remark:
/// true(デフォルト値)の場合、署名検証を行います
@property (nonatomic) BOOL validateAttributes;
@end

enum ValidationResultStatus : NSInteger;

/// ValidationResultは、署名検証結果を表すクラスです。
SWIFT_CLASS("_TtC7libjeid16ValidationResult")
@interface ValidationResult : NSObject
/// インスタンスの文字列表現を返します
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) enum ValidationResultStatus status;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// ValidationResultStatusは、署名検証結果の状態を表すクラスです。
typedef SWIFT_ENUM(NSInteger, ValidationResultStatus, open) {
/// 有効
  ValidationResultStatusVALID = 0,
/// 署名値の検証に失敗
  ValidationResultStatusINVALID_SIGNATURE = 1,
/// 証明書の検証に失敗
  ValidationResultStatusINVALID_CERTIFICATE = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
